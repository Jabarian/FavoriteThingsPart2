#include "BookList.h"

BookList::BookList()
{
	size = 0;
}

int BookList::getSize() const
{
	return size;
}

bool BookList::isDuplicate(int isbn)
{
	for (int i = 0; i < getSize(); i++)
	{
		if (books[i].getISBN() == isbn)
			return true;
	}
	return false;
}

void BookList::addBook()
{
	// variables
	int isbn, year;
	string title, author, publisher;
	double price;

	cout << "Please input data for your favorite book" << endl;
// label to continue input
input:
	// get user input
	cout << "Enter Book ISBN: ";
	cin >> isbn;
	
	// check if book already exists
	if (isDuplicate(isbn))
	{
		// input again
		cout << "List has already a book with same ISBN, Please try again. " << endl;
		goto input;
	}

	// clear input buffer
	cin.ignore();
	cout << "Enter Book Title: ";
	getline(cin, title);
	cout << "Enter Book Author: ";
	getline(cin, author);
	cout << "Enter Book Publisher: ";
	getline(cin, publisher);
	cout << "Enter Book Published Year: ";
	cin >> year;
	cout << "Enter Book Price: ";
	cin >> price;

	// Make a Book class object
	Book book(isbn, title, author, publisher, year, price);

	// add book to book list
	books[size] = book;

	// increase size by 1
	size++;
}

Book BookList::getBookAtIndex(int i) const
{
	if (i >= 0 && i < size)
		return books[i];
	else
		return Book();	// empty book object
}

// to read data from file
void BookList::readFromFile()
{
	// set size to 0
	size = 0;

	// get input file name
	cout << "Enter input file name: ";
	string filename;
	cin >> filename;

	// open file
	ifstream inFile(filename, ios::in);

	// if file opened successfully
	if (!inFile.is_open())
	{
		cout << "Can't open file" << endl;
		return;
	}

	while (!inFile.eof())
	{
		// read a line from file
		string line;
		getline(inFile, line);

		// if line is not empty
		if (line.length() == 0)
		{
			continue;
		}

		// create a Book object
		Book book;
		// split line by |
		stringstream stream(line);
		string token;
		// get isbn
		getline(stream, token, '|');
		stringstream convert(token);
		int isbn;
		convert >> isbn;
		// set isbn
		book.setISBN(isbn);
		// get title
		getline(stream, token, '|');
		book.setTitle(token);
		// get author
		getline(stream, token, '|');
		book.setAuthor(token);
		// get publisher
		getline(stream, token, '|');
		book.setPublisher(token);
		// get year
		getline(stream, token, '|');
		stringstream convert1(token);
		int year;
		convert1 >> year;
		book.setYear(year);
		// get price
		getline(stream, token, '|');
		stringstream convert2(token);
		double price;
		convert2 >> price;
		book.setPrice(price);

		// add book to array
		books[size++] = book;
	}

	// close file
	inFile.close();
}

// to save data to file
void BookList::saveToFile()
{
	// get output file name
	cout << "Enter output file name: ";
	string filename;
	cin >> filename;

	// open file
	ofstream outFile(filename, ios::out);

	// if file opened successfully
	if (!outFile.is_open())
	{
		cout << "Couldn't open file" << endl;
		return;
	}

	for (int i = 0; i < getSize(); i++)
	{
		// get book at index
		Book book = getBookAtIndex(i);
		// write to file
		outFile << book.getISBN() << "|";
		outFile << book.getTitle() << "|";
		outFile << book.getAuthor() << "|";
		outFile << book.getPublisher() << "|";
		outFile << book.getYear() << "|";
		outFile << book.getPrice() << endl;
	}

	// save changes
	outFile.flush();
	// close file
	outFile.close();
}

// for list output
ostream& operator<<(ostream& os, const BookList& obj)
{
	if (obj.getSize() == 0)
	{
		os << "Book list is empty" << endl;
	}
	else
	{
		os << "Book list has following books:" << endl << endl;
	}

	for (int i = 0; i < obj.getSize(); i++)
	{
		Book book = obj.getBookAtIndex(i);

		// display book data
		os << "ISBN: " << book.getISBN() << endl;
		os << "Title: " << book.getTitle() << endl;
		os << "Author: " << book.getAuthor() << endl;
		os << "Publisher: " << book.getPublisher() << endl;
		os << "Year: " << book.getYear() << endl;
		os << "Price: " << book.getPrice() << endl;
		os << endl;
	}
	return os;
}